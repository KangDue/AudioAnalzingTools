=== 동시 녹화 PySerial + 카메라 프로젝트 작업 일지 ===

날짜: 2024년 12월 19일

[완료된 작업]
1. 프로젝트 초기 설정
   - pyproject.toml에 필요한 의존성 추가
     * PyQt5, pyserial, opencv-python, numpy, scipy, pyqtgraph, matplotlib
   - 프로젝트 설명 업데이트

2. 메인 애플리케이션 구조 구현
   - FakeSerialDevice 클래스: 실제 시리얼 장치가 없을 때 가짜 데이터 생성
   - FakeCameraDevice 클래스: 실제 카메라가 없을 때 테스트 패턴 영상 생성
   - SerialManager 클래스: 시리얼 장치 자동 감지 및 관리
   - CameraManager 클래스: 카메라 장치 자동 감지 및 관리

3. GUI 구현 (PyQt5 기반)
   - MainWindow: 메인 윈도우 및 탭 구조
   - RecordTab: 녹화 기능 및 실시간 FFT 그래프
   - AnalysisTab: Heatmap Overlay 분석 (기본 UI)
   - AudioTab: 오디오 분석 (기본 UI)

4. 녹화 기능 구현
   - RecordingThread: 멀티스레드 녹화 처리
   - 오디오/비디오 동시 녹화
   - 실시간 FFT 그래프 표시
   - 진행률 표시 및 상태 업데이트

[구현된 주요 기능]
- 장치 자동 감지 (Real/Fake 모드 자동 전환)
- 32채널 오디오 녹화 (WAV 형식)
- 비디오 녹화 (MP4 형식)
- 실시간 FFT 분석 및 그래프 표시
- 사용자 친화적 GUI 인터페이스

[다음 작업 계획]
1. Analysis Tab 기능 완성
   - 비디오/오디오 파일 로드 기능
   - Heatmap Overlay 분석 구현
   - Alpha 조절 및 표시 옵션

2. Audio Tab 기능 완성
   - WAV 파일 로드 및 채널 선택
   - STFT, FFT, Waveform 분석 구현
   - 멀티채널/단일채널 분석

3. 테스트 및 디버깅
   - 실제 장치 연결 테스트
   - Fake 모드 동작 확인
   - 파일 저장/로드 기능 검증

[현재 상태]
- 핵심 프로젝트 구조 및 Record Tab 완료
- Analysis Tab: 파일 선택 기능 구현 완료
- Audio Tab: 파일 선택 및 분석 기능 구현 완료
- Fake 모드 개선: 51.2kHz 샘플레이트, 10초 녹화, 오디오 데이터 저장
- 시리얼 통신 개선: 데이터 수신 확인 로직 추가
- 애플리케이션 성공적으로 실행됨

[최근 수정사항 (2024)]
### 오디오 시스템 개선
- 샘플레이트를 48kHz에서 51.2kHz로 변경
- Fake 모드에서 10초 분량의 WAV 데이터 자동 생성 및 저장
- 시리얼 통신 데이터 수신 확인 로직 추가 (1.5초 테스트)

### UI 기능 완성
- Analysis Tab: 비디오/오디오 파일 선택 기능 구현
- Audio Tab: WAV 파일 로드, 채널 선택, 분석 기능 구현
  - Waveform, FFT, STFT 분석 지원
  - 실시간 그래프 표시

### 라이센스 문제 해결
- PySide6에서 PyQt5로 복귀 (라이센스 이슈)
- 정확한 PyQt5 버전 지정으로 Windows 호환성 확보

[해결된 이슈]
- PyQt5 Windows 호환성 문제 (정확한 버전 지정으로 해결)
- Analysis/Audio Tab 파일 선택 기능 누락
- Fake 오디오 데이터 저장 문제
- 시리얼 통신 데이터 수신 확인 부족
- 샘플레이트 불일치 (51.2kHz로 통일)
- uv sync 의존성 설치 완료
- 애플리케이션 정상 실행 확인

## 최신 수정사항 (Record Tab 개선)
### UI 변경
- Record Tab에서 FFT 그래프를 카메라 화면으로 변경
- 실시간 카메라 피드 표시 (16fps 업데이트로 최적화)
- Fake 카메라 모드에서도 움직이는 테스트 패턴 표시

### 녹화 로직 개선
- Fake 모드에서 정확히 10초 분량의 데이터 생성
- 비디오: 300프레임 (30fps × 10초) 정확히 생성
- 오디오: 51.2kHz × 10초 × 32채널 정확히 생성
- 실제 모드와 fake 모드 분리된 녹화 로직

### 성능 최적화 (2024-12-19 추가)
- FakeCamera의 픽셀별 계산을 NumPy 벡터화 연산으로 최적화
- 녹화 스레드의 타이밍 로직 개선 (누적 오차 방지)
- 카메라 디스플레이 업데이트 최적화 (불필요한 스케일링 제거)
- 프레임 처리 순서 최적화 (리사이즈 → 색상변환)
- 카메라 업데이트 주기를 60ms(16fps)로 최적화

### 오디오 저장 문제 해결 (2024-12-19 추가)
- FakeSerialDevice에서 생성하는 오디오 데이터 크기 불일치 문제 해결
- 1926바이트 요청에 대해 1920바이트 데이터 생성하는 문제 수정
- 오디오 데이터 크기 검증 로직 개선 (>= 1920바이트)
- Fake 모드에서 정확히 32채널, 51.2kHz, 10초 WAV 파일 저장 구현
- 실제 녹화 과정과 별개로 fake 모드 전용 오디오 생성 로직 추가

### 분석 탭 기능 구현 (2024-12-19 추가)
- 비디오 파일 로드 및 재생 기능 구현
- 10초 길이 랜덤 2D 히트맵 생성 기능 추가
- 영상 재생에 따른 실시간 히트맵 오버레이 구현
- 알파 블렌딩을 통한 투명도 조절 기능
- 히트맵 전용/비디오 전용/오버레이 모드 선택 기능
- 재생/일시정지/정지 컨트롤 및 프로그레스 슬라이더 추가

### 제어 가능한 컬러바 기능 구현 (2024-12-19 추가)
- pyqtgraph HistogramLUTWidget 기반 인터랙티브 컬러바
- 11가지 컬러맵 선택 기능 (viridis, plasma, inferno, magma, hot, cool, spring, summer, autumn, winter, jet)
- 실시간 컬러바 표시/숨김 기능
- 사용자가 직접 조절 가능한 레벨 범위 (드래그로 min/max 조절)
- 히트맵 데이터와 컬러바 실시간 동기화
- pyqtgraph ImageItem을 통한 효율적인 히트맵 업데이트
- matplotlib 정적 컬러바에서 pyqtgraph 동적 컬러바로 전환
- 사용자 설정 레벨 고정 기능 (프레임 변경 시에도 레벨 유지)
- sigLevelsChanged 이벤트를 통한 레벨 자동 저장 및 복원
- 중복 이벤트 연결 방지를 통한 안정성 개선 (levels_connected 플래그 사용)
- setImage() 호출 시 자동 레벨 조정 비활성화 (autoLevels=False)
- 프레임 업데이트 시 레벨 백업 및 복원 로직 강화
- 컬러바 레벨 설정이 실제 비디오 오버레이 이미지에 적용되도록 개선
- 히트맵 정규화 로직 추가 (컬러바 min/max 레벨 범위 적용)

### 코드 정리
- FFT 관련 코드 제거 (Record Tab에서)
- 카메라 디스플레이 기능 추가
- 불필요한 신호(audio_data_ready) 제거

[이슈 및 주의사항]
- 실제 시리얼 장치 프로토콜 검증 필요
- 메모리 사용량 최적화 고려
- Analysis Tab의 heatmap overlay 기능 구현 필요

[추가 완료 작업]
5. 환경 설정 및 실행 테스트
   - PyQt5 → PySide6 마이그레이션 (후에 라이센스 문제로 PyQt5로 복원)
   - uv 환경에서 의존성 설치 완료
   - GUI 애플리케이션 정상 실행 확인

6. 라이센스 및 기능 요구사항 반영 (2024년 12월 19일)
   - PySide6 → PyQt5 복원 (라이센스 문제)
   - Fake 모드에서 10초 고정 녹화 구현
   - 진행률 표시를 퍼센트에서 초 단위로 변경
   - 실제 모드와 Fake 모드 구분하여 녹화 시간 설정